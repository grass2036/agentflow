#!/usr/bin/env python3
"""
Test XAI Integration - Email Generator
Use Grok to generate Python email sending code
"""

import asyncio
import os
from ai_agent.integrations.xai_integration import XAIIntegration
from ai_agent.core.types import AgentRole

async def test_email_generation():
    """Test XAI Grok to generate Python email sending code"""
    print("🚀 Testing XAI (Grok) Integration")
    print("🎯 Task: Generate Python email sending code")
    print("=" * 60)
    
    # Check API key
    api_key = os.getenv('XAI_API_KEY')
    if not api_key:
        print("❌ XAI_API_KEY environment variable not set!")
        print("💡 Please set your X.AI API key in .env file")
        return
    
    print(f"🔑 Using API Key: {api_key[:10]}...{api_key[-10:]}")
    
    try:
        # Initialize XAI integration
        xai = XAIIntegration()
        
        # Test connection first
        print("\n🧪 Testing connection...")
        connection_test = await xai.test_connection()
        
        if not connection_test['connected']:
            print(f"❌ Connection failed: {connection_test['response']}")
            return
            
        print(f"✅ Connected successfully!")
        print(f"🤖 Model: {connection_test['model']}")
        
        # Generate email sending code
        print("\n📧 Generating Python email sending code...")
        print("-" * 40)
        
        task_description = """
        Create a comprehensive Python email sending function that includes:
        1. SMTP configuration for popular email providers (Gmail, Outlook, etc.)
        2. Support for both plain text and HTML emails
        3. File attachment functionality
        4. Error handling and retry mechanisms
        5. Email validation
        6. Security best practices (app passwords, OAuth)
        7. Example usage with different scenarios
        
        The code should be production-ready with proper documentation and examples.
        """
        
        result = await xai.execute_agent_task(
            task_description, 
            AgentRole.BACKEND_DEVELOPER,
            context={
                "project_type": "utility_function",
                "programming_language": "python",
                "libraries_preferred": ["smtplib", "email", "ssl"],
                "security_requirements": ["encrypted_connection", "secure_authentication"],
                "target_audience": "developers"
            }
        )
        
        print(f"📊 Task Status: {result['status'].value}")
        print(f"🤖 Model Used: {result['model_used']}")
        print(f"🏷️ Agent Role: {result['agent_role']}")
        
        if result['status'].value == 'completed':
            print(f"\n📝 Generated Code:")
            print("=" * 60)
            print(result['output'])
            
            # Show execution info
            exec_info = result['execution_info']
            print(f"\n📊 Execution Info:")
            print(f"  🔌 API Provider: {exec_info['api_provider']}")
            print(f"  🤖 Model: {exec_info['model']}")
            
            if 'usage' in exec_info:
                usage = exec_info['usage']
                print(f"  📈 Token Usage: {usage}")
                
            # Save to file
            output_file = "generated_email_sender.py"
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write("#!/usr/bin/env python3\n")
                f.write('"""\n')
                f.write("Python Email Sender - Generated by XAI Grok\n")
                f.write(f"Agent: {result['agent_role']}\n")
                f.write(f"Model: {result['model_used']}\n")
                f.write('"""\n\n')
                f.write(result['output'])
                
            print(f"\n💾 Code saved to: {output_file}")
            
        else:
            print(f"❌ Task failed: {result['error']}")
            print(f"🔍 Error details: {result['execution_info']}")
            
    except Exception as e:
        print(f"💥 Error during test: {e}")

async def test_multiple_agents():
    """Test multiple agents with email-related tasks"""
    print("\n🤖 Testing Multiple Agents for Email Project")
    print("=" * 60)
    
    try:
        xai = XAIIntegration()
        
        # Different agents, different perspectives
        agents_tasks = [
            (
                AgentRole.PROJECT_MANAGER,
                "Create a project plan for developing an enterprise email automation system"
            ),
            (
                AgentRole.ARCHITECT, 
                "Design the system architecture for a scalable email service with queue management"
            ),
            (
                AgentRole.SECURITY_ENGINEER,
                "Define security requirements and best practices for an email sending service"
            ),
            (
                AgentRole.QA_ENGINEER,
                "Create a comprehensive testing strategy for email functionality"
            )
        ]
        
        for agent_role, task in agents_tasks:
            print(f"\n🎭 {agent_role.value.replace('_', ' ').title()}")
            print(f"📋 Task: {task}")
            print("-" * 40)
            
            result = await xai.execute_agent_task(task, agent_role)
            
            if result['status'].value == 'completed':
                print(f"✅ Status: Completed")
                print(f"🤖 Model: {result['model_used']}")
                # Show first 300 chars of output
                preview = result['output'][:300] + "..." if len(result['output']) > 300 else result['output']
                print(f"📄 Output Preview:\n{preview}")
            else:
                print(f"❌ Failed: {result['error']}")
                
            # Brief pause between requests
            await asyncio.sleep(1)
            
    except Exception as e:
        print(f"💥 Multi-agent test error: {e}")

async def main():
    """Main test function"""
    print("🧪 XAI (Grok) Integration Test Suite")
    print("Testing email generation and multi-agent coordination")
    print("=" * 80)
    
    # Set API key if available in environment
    api_key = os.getenv('XAI_API_KEY')
    if not api_key:
        print("❌ XAI_API_KEY environment variable not set!")
        print("💡 Please set your X.AI API key in .env file")
        return
    
    # Run tests
    await test_email_generation()
    await asyncio.sleep(2)
    await test_multiple_agents()
    
    print("\n" + "=" * 80)
    print("🎉 XAI Integration Test Complete!")
    print("💡 Check the generated_email_sender.py file for the Grok-generated code")

if __name__ == "__main__":
    asyncio.run(main())
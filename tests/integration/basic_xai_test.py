#!/usr/bin/env python3
"""
Basic XAI Test - Using only standard library
Test X.AI Grok API to generate Python email sending code
"""

import urllib.request
import urllib.parse
import json
import ssl

def test_xai_email_generation():
    """Test XAI API for email code generation using urllib"""
    
    # XAI API configuration
    import os
    api_key = os.getenv("XAI_API_KEY", "your-xai-api-key-here")
    api_url = "https://api.x.ai/v1/chat/completions"
    
    print("🚀 Testing X.AI (Grok) API")
    print("🎯 Task: Generate Python email sending code")
    print("=" * 60)
    print(f"🔑 API Key: {api_key[:10]}...{api_key[-10:]}")
    
    # Email generation prompt
    messages = [
        {
            "role": "system",
            "content": "You are an expert Python backend developer AI agent. You excel at API development, database design, security implementation, and writing clean, efficient, secure backend code with proper error handling."
        },
        {
            "role": "user", 
            "content": """Create a comprehensive Python email sending function that includes:

1. SMTP configuration for popular email providers (Gmail, Outlook, Yahoo)
2. Support for both plain text and HTML emails
3. File attachment functionality  
4. Error handling and retry mechanisms
5. Email validation with regex
6. Security best practices (SSL/TLS, app passwords)
7. Example usage with different scenarios
8. Proper logging and debugging options

Requirements:
- Use only Python standard library (smtplib, email, ssl, etc.)
- Include detailed docstrings and type hints
- Production-ready with comprehensive error handling
- Show examples for Gmail, Outlook, and generic SMTP
- Include attachment handling for common file types

Please provide a complete, working implementation with examples."""
        }
    ]
    
    # API payload
    payload = {
        "model": "grok-3-mini",
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": 3500,
        "stream": False
    }
    
    # Prepare request
    data = json.dumps(payload).encode('utf-8')
    
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json',
        'Content-Length': str(len(data))
    }
    
    print(f"🤖 Using model: {payload['model']}")
    print(f"🌡️ Temperature: {payload['temperature']}")
    print(f"📊 Max tokens: {payload['max_tokens']}")
    
    try:
        print("\n🔄 Sending request to X.AI...")
        
        # Create request
        req = urllib.request.Request(api_url, data=data, headers=headers, method='POST')
        
        # Create SSL context
        context = ssl.create_default_context()
        
        # Send request
        with urllib.request.urlopen(req, context=context, timeout=120) as response:
            
            print(f"📡 Response status: {response.status}")
            
            if response.status == 200:
                response_data = json.loads(response.read().decode('utf-8'))
                
                # Extract response
                content = response_data['choices'][0]['message']['content']
                usage = response_data.get('usage', {})
                
                print("✅ Request successful!")
                print(f"📊 Token usage: {usage}")
                print("\n" + "="*60)
                print("📧 Generated Python Email Code:")
                print("="*60)
                print(content)
                
                # Save generated code
                output_file = "grok_generated_email_sender.py"
                with open(output_file, 'w', encoding='utf-8') as f:
                    f.write("#!/usr/bin/env python3\n")
                    f.write('"""\n')
                    f.write("Python Email Sender - Generated by X.AI Grok\n")
                    f.write("Model: grok-3-mini\n")
                    f.write("Agent: Backend Developer\n")
                    f.write("Generated for: Comprehensive email sending functionality\n")
                    f.write(f"Token usage: {usage}\n")
                    f.write('"""\n\n')
                    f.write(content)
                
                print(f"\n💾 Code saved to: {output_file}")
                print("🎉 XAI integration test successful!")
                
                return True
                
            else:
                error_text = response.read().decode('utf-8')
                print(f"❌ API Error {response.status}: {error_text}")
                return False
                
    except urllib.error.HTTPError as e:
        error_text = e.read().decode('utf-8') if e.fp else str(e)
        print(f"🌐 HTTP Error {e.code}: {error_text}")
        return False
    except urllib.error.URLError as e:
        print(f"🌐 URL Error: {e}")
        return False
    except Exception as e:
        print(f"💥 Unexpected error: {e}")
        return False

def test_simple_chat():
    """Simple chat test to verify API connection"""
    
    import os
    api_key = os.getenv("XAI_API_KEY", "your-xai-api-key-here")
    api_url = "https://api.x.ai/v1/chat/completions"
    
    print("\n🗣️ Simple Chat Test")
    print("-" * 30)
    
    messages = [
        {
            "role": "user",
            "content": "Hello! Please respond with 'XAI connection successful - Grok is ready!' if you can process this message."
        }
    ]
    
    payload = {
        "model": "grok-3-mini", 
        "messages": messages,
        "temperature": 0.3,
        "max_tokens": 100
    }
    
    data = json.dumps(payload).encode('utf-8')
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    try:
        req = urllib.request.Request(api_url, data=data, headers=headers, method='POST')
        context = ssl.create_default_context()
        
        with urllib.request.urlopen(req, context=context, timeout=30) as response:
            if response.status == 200:
                response_data = json.loads(response.read().decode('utf-8'))
                content = response_data['choices'][0]['message']['content']
                model = response_data.get('model', 'unknown')
                print(f"🤖 Grok responds: {content}")
                print(f"📋 Model used: {model}")
                return True
            else:
                error_text = response.read().decode('utf-8')
                print(f"❌ Chat test failed: {error_text}")
                return False
                
    except Exception as e:
        print(f"💥 Chat error: {e}")
        return False

def main():
    """Main test function"""
    print("🧪 X.AI (Grok) Integration Test")
    print("Testing Python email generation with Grok models")
    print("Using standard library urllib for HTTP requests")
    print("=" * 80)
    
    # Test simple chat first
    print("🔍 Step 1: Testing basic API connection...")
    chat_success = test_simple_chat()
    
    if chat_success:
        print("\n✅ Basic connection successful!")
        print("🔍 Step 2: Generating Python email code...")
        email_success = test_xai_email_generation()
        
        if email_success:
            print("\n🎊 All tests passed! Check the generated file.")
        else:
            print("\n❌ Email generation failed")
    else:
        print("\n❌ Basic connection failed, check API key and network")
    
    print("\n" + "=" * 80)
    print("🏁 XAI Integration Test Complete!")
    
    # Show what was accomplished
    print("\n📋 Test Summary:")
    print("✓ Direct API call to X.AI using urllib")
    print("✓ Grok-3-mini model for code generation")
    print("✓ Backend Developer agent persona")
    print("✓ Comprehensive email functionality request")
    print("✓ Production-ready code with error handling")

if __name__ == "__main__":
    main()
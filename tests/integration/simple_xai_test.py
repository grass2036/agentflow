#!/usr/bin/env python3
"""
Simple XAI Test - Direct API call without complex imports
Test X.AI Grok API to generate Python email sending code
"""

import asyncio
import aiohttp
import json
import os

async def test_xai_direct():
    """Direct test of XAI API for email generation"""
    
    # XAI API configuration
    api_key = os.getenv("XAI_API_KEY", "your-xai-api-key-here")
    base_url = "https://api.x.ai/v1"
    
    print("🚀 Testing X.AI (Grok) API")
    print("🎯 Task: Generate Python email sending code")
    print("=" * 60)
    print(f"🔑 API Key: {api_key[:10]}...{api_key[-10:]}")
    
    # Email generation prompt
    messages = [
        {
            "role": "system",
            "content": "You are an expert Python backend developer. You excel at writing clean, secure, and well-documented code with proper error handling."
        },
        {
            "role": "user", 
            "content": """Create a comprehensive Python email sending function that includes:

1. SMTP configuration for popular email providers (Gmail, Outlook, etc.)
2. Support for both plain text and HTML emails
3. File attachment functionality  
4. Error handling and retry mechanisms
5. Email validation
6. Security best practices (app passwords, SSL/TLS)
7. Example usage with different scenarios

The code should be production-ready with proper documentation, type hints, and examples.
Please provide a complete, working implementation."""
        }
    ]
    
    # API payload
    payload = {
        "model": "grok-3-mini",
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": 3000,
        "stream": False
    }
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    print(f"🤖 Using model: {payload['model']}")
    print(f"🌡️ Temperature: {payload['temperature']}")
    print(f"📊 Max tokens: {payload['max_tokens']}")
    
    try:
        async with aiohttp.ClientSession() as session:
            print("\n🔄 Sending request to X.AI...")
            
            async with session.post(
                f"{base_url}/chat/completions",
                headers=headers,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=120)
            ) as response:
                
                print(f"📡 Response status: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    
                    # Extract response
                    content = data['choices'][0]['message']['content']
                    usage = data.get('usage', {})
                    
                    print("✅ Request successful!")
                    print(f"📊 Token usage: {usage}")
                    print("\n" + "="*60)
                    print("📧 Generated Python Email Code:")
                    print("="*60)
                    print(content)
                    
                    # Save generated code
                    output_file = "grok_generated_email_sender.py"
                    with open(output_file, 'w', encoding='utf-8') as f:
                        f.write("#!/usr/bin/env python3\n")
                        f.write('"""\n')
                        f.write("Python Email Sender - Generated by X.AI Grok\n")
                        f.write("Model: grok-3-mini\n")
                        f.write("Generated for: Email sending functionality\n")
                        f.write('"""\n\n')
                        f.write(content)
                    
                    print(f"\n💾 Code saved to: {output_file}")
                    print("🎉 XAI integration test successful!")
                    
                else:
                    error_text = await response.text()
                    print(f"❌ API Error {response.status}: {error_text}")
                    
    except asyncio.TimeoutError:
        print("⏰ Request timeout - X.AI might be busy")
    except aiohttp.ClientError as e:
        print(f"🌐 Network error: {e}")
    except Exception as e:
        print(f"💥 Unexpected error: {e}")

async def test_simple_chat():
    """Simple chat test"""
    
    api_key = os.getenv("XAI_API_KEY", "your-xai-api-key-here")
    base_url = "https://api.x.ai/v1"
    
    print("\n🗣️ Simple Chat Test")
    print("-" * 30)
    
    messages = [
        {
            "role": "user",
            "content": "Hello! Please respond with 'XAI connection successful' if you can hear me."
        }
    ]
    
    payload = {
        "model": "grok-3-mini", 
        "messages": messages,
        "temperature": 0.3,
        "max_tokens": 50
    }
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{base_url}/chat/completions",
                headers=headers,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                if response.status == 200:
                    data = await response.json()
                    content = data['choices'][0]['message']['content']
                    print(f"🤖 Grok says: {content}")
                    return True
                else:
                    error_text = await response.text()
                    print(f"❌ Chat test failed: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"💥 Chat error: {e}")
        return False

async def main():
    """Main test function"""
    print("🧪 X.AI (Grok) Direct Integration Test")
    print("Testing Python email generation with Grok models")
    print("=" * 80)
    
    # Test simple chat first
    chat_success = await test_simple_chat()
    
    if chat_success:
        print("\n✅ Basic chat working, proceeding with email generation...")
        await asyncio.sleep(2)
        await test_xai_direct()
    else:
        print("\n❌ Basic chat failed, check API key and connection")
    
    print("\n" + "=" * 80)
    print("🏁 Test complete!")

if __name__ == "__main__":
    asyncio.run(main())